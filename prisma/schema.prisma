// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String        @id @default(uuid())
  username    String        @unique @db.VarChar(50)
  name        String        @db.VarChar(191)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  wallets     Wallet[]
  transaction Transaction[]
  LedgerEntry LedgerEntry[]

  @@map("customers")
}

model Wallet {
  id           String        @id @default(uuid())
  customerId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  balance      String // store encrypted value
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  ledgerEntry  LedgerEntry[]

  @@map("wallets")
}

model Transaction {
  id            Int          @id @default(autoincrement())
  customerId    String
  walletId      String
  type          String       @db.VarChar(50) // 'deposit' or 'withdrawal'
  amount        String // store encrypted value
  description   String
  depositSource String?      @db.VarChar(50) // The source of the deposit transaction :via debitcard or transfer
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  wallet        Wallet       @relation(fields: [walletId], references: [id])
  LedgerEntry   LedgerEntry?

  @@map("transactions")
}

model LedgerEntry {
  id            Int         @id @default(autoincrement())
  customerId    String
  walletId      String
  transactionId Int         @unique
  balanceBefore String      @db.VarChar(50)
  balanceAfter  String      @db.VarChar(50)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  wallet        Wallet      @relation(fields: [walletId], references: [id])
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("ledger_entries")
}
